name: Release - Linux AppImage x64

on:
  pull_request:
    branches: [ main ]
    types: [ closed ]

# Sets permissions to allow version tag
permissions:
  contents: write

jobs:
  build:
    if: ${{ github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/') }}

    runs-on: ubuntu-20.04

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install apt packages
      run: sudo apt update && sudo apt install build-essential git clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev llvm locate libfuse2 libgphoto2-dev

    - name: Detect Flutter Version
      uses: kuhnroyal/flutter-fvm-config-action@v1

    - name: Setup Flutter
      uses: hrishikesh-kadam/setup-flutter@v1
      with:
        ref: ${{ env.FLUTTER_VERSION }}
        setFlutterRootPath: 'true'
        addPubCacheBinToPath: 'true'
        flutterPrecache: '--linux'

    - name: Install minimal Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        components: rustfmt, clippy

    - name: Setup sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.3

    - name: Install cargo-expand
      uses: baptiste0928/cargo-install@v1
      with:
        crate: cargo-expand
      
    - name: Install flutter_rust_bridge_codegen
      uses: baptiste0928/cargo-install@v1
      with:
        crate: flutter_rust_bridge_codegen
        version: "1.81.0"

    - name: Install flutter_distributor
      run: dart pub global activate flutter_distributor

    - name: Install AppImage Builder
      run: wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" && chmod +x appimagetool && sudo mv appimagetool /usr/local/bin/

    - name: Install Dependencies
      run: flutter packages get

    - name: Generation l10n
      run: flutter gen-l10n

    - name: Generate Dart-to-Rust bridging code
      run: >
        flutter_rust_bridge_codegen
        --rust-input rust/src/dart_bridge/api.rs
        --dart-output lib/rust_bridge/library_api.generated.dart
        --rust-output rust/src/dart_bridge/ffi_exports.rs
        --skip-add-mod-to-lib --no-build-runner
      
    - name: Run Code Generation
      run: dart run build_runner build
      
    - name: Flutter Analyze
      run: flutter analyze

    # Extract version from branch name
    - name: Extract Release version
      id: extract_release_version
      shell: bash
      run: |
        release_version=$(echo ${{ github.event.pull_request.head.ref }} | cut -d/ -f2)
        echo "release_version=$release_version" >> $GITHUB_OUTPUT
        echo "distributor_version=${release_version/-/+}" >> $GITHUB_OUTPUT

    - name: Update locate DB
      run: sudo updatedb

    - name: Build and package as AppImage
      run: flutter_distributor package --platform linux --targets appimage --build-dart-define SENTRY_DSN=${{ secrets.SENTRY_DSN }} --build-dart-define SENTRY_ENVIRONMENT=Production --build-dart-define SENTRY_RELEASE=${{ steps.extract_release_version.outputs.distributor_version }}

    # Pack
    - name: Archive Release
      uses: thedoctor0/zip-release@0.7.1
      with:
        type: 'zip'
        directory: dist/${{ steps.extract_release_version.outputs.distributor_version }}
        filename: 'MomentoBooth-${{ steps.extract_release_version.outputs.release_version }}-Linux-AppImage-x64.zip'

    # Create GitHub release
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        prerelease: true
        replacesArtifacts: true
        tag: ${{ steps.extract_release_version.outputs.release_version }}
        artifacts: "dist/${{ steps.extract_release_version.outputs.distributor_version }}/MomentoBooth-${{ steps.extract_release_version.outputs.release_version }}-Linux-AppImage-x64.zip"

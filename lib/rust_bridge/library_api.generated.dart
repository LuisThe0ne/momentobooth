// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'library_api.generated.freezed.dart';

abstract class MomentoBoothNativeHelpers {
  Stream<LogEvent> initializeLog({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitializeLogConstMeta;

  Stream<HardwareInitializationFinishedEvent> initializeHardware(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitializeHardwareConstMeta;

  Future<List<NokhwaCameraInfo>> nokhwaGetCameras({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNokhwaGetCamerasConstMeta;

  Future<int> nokhwaOpenCamera({required String friendlyName, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNokhwaOpenCameraConstMeta;

  Stream<LiveCameraFrame> nokhwaSetCameraCallback(
      {required int cameraPtr,
      required List<ImageOperation> operations,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNokhwaSetCameraCallbackConstMeta;

  Future<void> nokhwaCloseCamera({required int cameraPtr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNokhwaCloseCameraConstMeta;

  Stream<FfSendTransferProgress> ffsendUploadFile(
      {required String hostUrl,
      required String filePath,
      String? downloadFilename,
      int? maxDownloads,
      int? expiresAfterSeconds,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFfsendUploadFileConstMeta;

  Future<void> ffsendDeleteFile({required String fileId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFfsendDeleteFileConstMeta;

  Future<Uint8List> jpegEncode(
      {required RawImage rawImage,
      required int quality,
      required List<ImageOperation> operationsBeforeEncoding,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJpegEncodeConstMeta;

  Future<RawImage> jpegDecode(
      {required Uint8List jpegData,
      required List<ImageOperation> operationsAfterDecoding,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJpegDecodeConstMeta;

  Future<RawImage> runImagePipeline(
      {required RawImage rawImage,
      required List<ImageOperation> operations,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunImagePipelineConstMeta;

  Future<void> updateFlutterAppLastAliveTime({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateFlutterAppLastAliveTimeConstMeta;
}

class FfSendTransferProgress {
  final bool isFinished;
  final int transferredBytes;
  final int? totalBytes;
  final String? downloadUrl;
  final DateTime? expireDate;
  final String? fileId;

  const FfSendTransferProgress({
    required this.isFinished,
    required this.transferredBytes,
    this.totalBytes,
    this.downloadUrl,
    this.expireDate,
    this.fileId,
  });
}

class HardwareInitializationFinishedEvent {
  final HardwareInitializationStep step;
  final bool hasSucceeded;
  final String message;

  const HardwareInitializationFinishedEvent({
    required this.step,
    required this.hasSucceeded,
    required this.message,
  });
}

enum HardwareInitializationStep {
  Nokhwa,
}

@freezed
class ImageOperation with _$ImageOperation {
  const factory ImageOperation.cropToAspectRatio(
    double field0,
  ) = ImageOperation_CropToAspectRatio;
  const factory ImageOperation.rotate(
    Rotation field0,
  ) = ImageOperation_Rotate;
}

class LiveCameraFrame {
  final RawImage rawImage;
  final int skippedFrames;

  const LiveCameraFrame({
    required this.rawImage,
    required this.skippedFrames,
  });
}

class LogEvent {
  final String message;
  final LogLevel level;

  const LogEvent({
    required this.message,
    required this.level,
  });
}

enum LogLevel {
  Debug,
  Info,
  Warning,
  Error,
}

class NokhwaCameraInfo {
  final int id;
  final String friendlyName;

  const NokhwaCameraInfo({
    required this.id,
    required this.friendlyName,
  });
}

class RawImage {
  final RawImageFormat format;
  final Uint8List data;
  final int width;
  final int height;

  const RawImage({
    required this.format,
    required this.data,
    required this.width,
    required this.height,
  });
}

enum RawImageFormat {
  Rgba,
}

enum Rotation {
  Rotate90,
  Rotate180,
  Rotate270,
}

class MomentoBoothNativeHelpersImpl implements MomentoBoothNativeHelpers {
  final MomentoBoothNativeHelpersPlatform _platform;
  factory MomentoBoothNativeHelpersImpl(ExternalLibrary dylib) =>
      MomentoBoothNativeHelpersImpl.raw(
          MomentoBoothNativeHelpersPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MomentoBoothNativeHelpersImpl.wasm(FutureOr<WasmModule> module) =>
      MomentoBoothNativeHelpersImpl(module as ExternalLibrary);
  MomentoBoothNativeHelpersImpl.raw(this._platform);
  Stream<LogEvent> initializeLog({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_initialize_log(port_),
      parseSuccessData: _wire2api_log_event,
      constMeta: kInitializeLogConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitializeLogConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "initialize_log",
        argNames: [],
      );

  Stream<HardwareInitializationFinishedEvent> initializeHardware(
      {dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_initialize_hardware(port_),
      parseSuccessData: _wire2api_hardware_initialization_finished_event,
      constMeta: kInitializeHardwareConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitializeHardwareConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "initialize_hardware",
        argNames: [],
      );

  Future<List<NokhwaCameraInfo>> nokhwaGetCameras({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nokhwa_get_cameras(port_),
      parseSuccessData: _wire2api_list_nokhwa_camera_info,
      constMeta: kNokhwaGetCamerasConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNokhwaGetCamerasConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nokhwa_get_cameras",
        argNames: [],
      );

  Future<int> nokhwaOpenCamera({required String friendlyName, dynamic hint}) {
    var arg0 = _platform.api2wire_String(friendlyName);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nokhwa_open_camera(port_, arg0),
      parseSuccessData: _wire2api_usize,
      constMeta: kNokhwaOpenCameraConstMeta,
      argValues: [friendlyName],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNokhwaOpenCameraConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nokhwa_open_camera",
        argNames: ["friendlyName"],
      );

  Stream<LiveCameraFrame> nokhwaSetCameraCallback(
      {required int cameraPtr,
      required List<ImageOperation> operations,
      dynamic hint}) {
    var arg0 = api2wire_usize(cameraPtr);
    var arg1 = _platform.api2wire_list_image_operation(operations);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_nokhwa_set_camera_callback(port_, arg0, arg1),
      parseSuccessData: _wire2api_live_camera_frame,
      constMeta: kNokhwaSetCameraCallbackConstMeta,
      argValues: [cameraPtr, operations],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNokhwaSetCameraCallbackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nokhwa_set_camera_callback",
        argNames: ["cameraPtr", "operations"],
      );

  Future<void> nokhwaCloseCamera({required int cameraPtr, dynamic hint}) {
    var arg0 = api2wire_usize(cameraPtr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nokhwa_close_camera(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kNokhwaCloseCameraConstMeta,
      argValues: [cameraPtr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNokhwaCloseCameraConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nokhwa_close_camera",
        argNames: ["cameraPtr"],
      );

  Stream<FfSendTransferProgress> ffsendUploadFile(
      {required String hostUrl,
      required String filePath,
      String? downloadFilename,
      int? maxDownloads,
      int? expiresAfterSeconds,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(hostUrl);
    var arg1 = _platform.api2wire_String(filePath);
    var arg2 = _platform.api2wire_opt_String(downloadFilename);
    var arg3 = _platform.api2wire_opt_box_autoadd_u8(maxDownloads);
    var arg4 = _platform.api2wire_opt_box_autoadd_usize(expiresAfterSeconds);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_ffsend_upload_file(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_ff_send_transfer_progress,
      constMeta: kFfsendUploadFileConstMeta,
      argValues: [
        hostUrl,
        filePath,
        downloadFilename,
        maxDownloads,
        expiresAfterSeconds
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFfsendUploadFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ffsend_upload_file",
        argNames: [
          "hostUrl",
          "filePath",
          "downloadFilename",
          "maxDownloads",
          "expiresAfterSeconds"
        ],
      );

  Future<void> ffsendDeleteFile({required String fileId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(fileId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ffsend_delete_file(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kFfsendDeleteFileConstMeta,
      argValues: [fileId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFfsendDeleteFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ffsend_delete_file",
        argNames: ["fileId"],
      );

  Future<Uint8List> jpegEncode(
      {required RawImage rawImage,
      required int quality,
      required List<ImageOperation> operationsBeforeEncoding,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_raw_image(rawImage);
    var arg1 = api2wire_u8(quality);
    var arg2 =
        _platform.api2wire_list_image_operation(operationsBeforeEncoding);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_jpeg_encode(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_ZeroCopyBuffer_Uint8List,
      constMeta: kJpegEncodeConstMeta,
      argValues: [rawImage, quality, operationsBeforeEncoding],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJpegEncodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jpeg_encode",
        argNames: ["rawImage", "quality", "operationsBeforeEncoding"],
      );

  Future<RawImage> jpegDecode(
      {required Uint8List jpegData,
      required List<ImageOperation> operationsAfterDecoding,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(jpegData);
    var arg1 = _platform.api2wire_list_image_operation(operationsAfterDecoding);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_jpeg_decode(port_, arg0, arg1),
      parseSuccessData: _wire2api_raw_image,
      constMeta: kJpegDecodeConstMeta,
      argValues: [jpegData, operationsAfterDecoding],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJpegDecodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jpeg_decode",
        argNames: ["jpegData", "operationsAfterDecoding"],
      );

  Future<RawImage> runImagePipeline(
      {required RawImage rawImage,
      required List<ImageOperation> operations,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_raw_image(rawImage);
    var arg1 = _platform.api2wire_list_image_operation(operations);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_run_image_pipeline(port_, arg0, arg1),
      parseSuccessData: _wire2api_raw_image,
      constMeta: kRunImagePipelineConstMeta,
      argValues: [rawImage, operations],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunImagePipelineConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_image_pipeline",
        argNames: ["rawImage", "operations"],
      );

  Future<void> updateFlutterAppLastAliveTime({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_update_flutter_app_last_alive_time(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateFlutterAppLastAliveTimeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateFlutterAppLastAliveTimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_flutter_app_last_alive_time",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  DateTime _wire2api_Chrono_Utc(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
    return raw as Uint8List;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  DateTime _wire2api_box_autoadd_Chrono_Utc(dynamic raw) {
    return _wire2api_Chrono_Utc(raw);
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  FfSendTransferProgress _wire2api_ff_send_transfer_progress(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FfSendTransferProgress(
      isFinished: _wire2api_bool(arr[0]),
      transferredBytes: _wire2api_u64(arr[1]),
      totalBytes: _wire2api_opt_box_autoadd_u64(arr[2]),
      downloadUrl: _wire2api_opt_String(arr[3]),
      expireDate: _wire2api_opt_box_autoadd_Chrono_Utc(arr[4]),
      fileId: _wire2api_opt_String(arr[5]),
    );
  }

  HardwareInitializationFinishedEvent
      _wire2api_hardware_initialization_finished_event(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return HardwareInitializationFinishedEvent(
      step: _wire2api_hardware_initialization_step(arr[0]),
      hasSucceeded: _wire2api_bool(arr[1]),
      message: _wire2api_String(arr[2]),
    );
  }

  HardwareInitializationStep _wire2api_hardware_initialization_step(
      dynamic raw) {
    return HardwareInitializationStep.values[raw as int];
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<NokhwaCameraInfo> _wire2api_list_nokhwa_camera_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_nokhwa_camera_info).toList();
  }

  LiveCameraFrame _wire2api_live_camera_frame(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LiveCameraFrame(
      rawImage: _wire2api_raw_image(arr[0]),
      skippedFrames: _wire2api_usize(arr[1]),
    );
  }

  LogEvent _wire2api_log_event(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogEvent(
      message: _wire2api_String(arr[0]),
      level: _wire2api_log_level(arr[1]),
    );
  }

  LogLevel _wire2api_log_level(dynamic raw) {
    return LogLevel.values[raw as int];
  }

  NokhwaCameraInfo _wire2api_nokhwa_camera_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return NokhwaCameraInfo(
      id: _wire2api_u32(arr[0]),
      friendlyName: _wire2api_String(arr[1]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  DateTime? _wire2api_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_Chrono_Utc(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  RawImage _wire2api_raw_image(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return RawImage(
      format: _wire2api_raw_image_format(arr[0]),
      data: _wire2api_uint_8_list(arr[1]),
      width: _wire2api_usize(arr[2]),
      height: _wire2api_usize(arr[3]),
    );
  }

  RawImageFormat _wire2api_raw_image_format(dynamic raw) {
    return RawImageFormat.values[raw as int];
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_raw_image_format(RawImageFormat raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_rotation(Rotation raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class MomentoBoothNativeHelpersPlatform
    extends FlutterRustBridgeBase<MomentoBoothNativeHelpersWire> {
  MomentoBoothNativeHelpersPlatform(ffi.DynamicLibrary dylib)
      : super(MomentoBoothNativeHelpersWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_RawImage> api2wire_box_autoadd_raw_image(RawImage raw) {
    final ptr = inner.new_box_autoadd_raw_image_0();
    _api_fill_to_wire_raw_image(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_0(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_box_autoadd_usize(int raw) {
    return inner.new_box_autoadd_usize_0(api2wire_usize(raw));
  }

  @protected
  ffi.Pointer<wire_list_image_operation> api2wire_list_image_operation(
      List<ImageOperation> raw) {
    final ans = inner.new_list_image_operation_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_image_operation(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_opt_box_autoadd_usize(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_usize(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_raw_image(
      RawImage apiObj, ffi.Pointer<wire_RawImage> wireObj) {
    _api_fill_to_wire_raw_image(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_image_operation(
      ImageOperation apiObj, wire_ImageOperation wireObj) {
    if (apiObj is ImageOperation_CropToAspectRatio) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ImageOperation_CropToAspectRatio();
      wireObj.kind.ref.CropToAspectRatio.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ImageOperation_Rotate) {
      var pre_field0 = api2wire_rotation(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_ImageOperation_Rotate();
      wireObj.kind.ref.Rotate.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_raw_image(RawImage apiObj, wire_RawImage wireObj) {
    wireObj.format = api2wire_raw_image_format(apiObj.format);
    wireObj.data = api2wire_uint_8_list(apiObj.data);
    wireObj.width = api2wire_usize(apiObj.width);
    wireObj.height = api2wire_usize(apiObj.height);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class MomentoBoothNativeHelpersWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MomentoBoothNativeHelpersWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MomentoBoothNativeHelpersWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_initialize_log(
    int port_,
  ) {
    return _wire_initialize_log(
      port_,
    );
  }

  late final _wire_initialize_logPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_initialize_log');
  late final _wire_initialize_log =
      _wire_initialize_logPtr.asFunction<void Function(int)>();

  void wire_initialize_hardware(
    int port_,
  ) {
    return _wire_initialize_hardware(
      port_,
    );
  }

  late final _wire_initialize_hardwarePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_initialize_hardware');
  late final _wire_initialize_hardware =
      _wire_initialize_hardwarePtr.asFunction<void Function(int)>();

  void wire_nokhwa_get_cameras(
    int port_,
  ) {
    return _wire_nokhwa_get_cameras(
      port_,
    );
  }

  late final _wire_nokhwa_get_camerasPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_nokhwa_get_cameras');
  late final _wire_nokhwa_get_cameras =
      _wire_nokhwa_get_camerasPtr.asFunction<void Function(int)>();

  void wire_nokhwa_open_camera(
    int port_,
    ffi.Pointer<wire_uint_8_list> friendly_name,
  ) {
    return _wire_nokhwa_open_camera(
      port_,
      friendly_name,
    );
  }

  late final _wire_nokhwa_open_cameraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_nokhwa_open_camera');
  late final _wire_nokhwa_open_camera = _wire_nokhwa_open_cameraPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_nokhwa_set_camera_callback(
    int port_,
    int camera_ptr,
    ffi.Pointer<wire_list_image_operation> operations,
  ) {
    return _wire_nokhwa_set_camera_callback(
      port_,
      camera_ptr,
      operations,
    );
  }

  late final _wire_nokhwa_set_camera_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.UintPtr,
                  ffi.Pointer<wire_list_image_operation>)>>(
      'wire_nokhwa_set_camera_callback');
  late final _wire_nokhwa_set_camera_callback =
      _wire_nokhwa_set_camera_callbackPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_list_image_operation>)>();

  void wire_nokhwa_close_camera(
    int port_,
    int camera_ptr,
  ) {
    return _wire_nokhwa_close_camera(
      port_,
      camera_ptr,
    );
  }

  late final _wire_nokhwa_close_cameraPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
          'wire_nokhwa_close_camera');
  late final _wire_nokhwa_close_camera =
      _wire_nokhwa_close_cameraPtr.asFunction<void Function(int, int)>();

  void wire_ffsend_upload_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> host_url,
    ffi.Pointer<wire_uint_8_list> file_path,
    ffi.Pointer<wire_uint_8_list> download_filename,
    ffi.Pointer<ffi.Uint8> max_downloads,
    ffi.Pointer<ffi.UintPtr> expires_after_seconds,
  ) {
    return _wire_ffsend_upload_file(
      port_,
      host_url,
      file_path,
      download_filename,
      max_downloads,
      expires_after_seconds,
    );
  }

  late final _wire_ffsend_upload_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_ffsend_upload_file');
  late final _wire_ffsend_upload_file = _wire_ffsend_upload_filePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UintPtr>)>();

  void wire_ffsend_delete_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> file_id,
  ) {
    return _wire_ffsend_delete_file(
      port_,
      file_id,
    );
  }

  late final _wire_ffsend_delete_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ffsend_delete_file');
  late final _wire_ffsend_delete_file = _wire_ffsend_delete_filePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_jpeg_encode(
    int port_,
    ffi.Pointer<wire_RawImage> raw_image,
    int quality,
    ffi.Pointer<wire_list_image_operation> operations_before_encoding,
  ) {
    return _wire_jpeg_encode(
      port_,
      raw_image,
      quality,
      operations_before_encoding,
    );
  }

  late final _wire_jpeg_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_RawImage>, ffi.Uint8,
              ffi.Pointer<wire_list_image_operation>)>>('wire_jpeg_encode');
  late final _wire_jpeg_encode = _wire_jpeg_encodePtr.asFunction<
      void Function(int, ffi.Pointer<wire_RawImage>, int,
          ffi.Pointer<wire_list_image_operation>)>();

  void wire_jpeg_decode(
    int port_,
    ffi.Pointer<wire_uint_8_list> jpeg_data,
    ffi.Pointer<wire_list_image_operation> operations_after_decoding,
  ) {
    return _wire_jpeg_decode(
      port_,
      jpeg_data,
      operations_after_decoding,
    );
  }

  late final _wire_jpeg_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_list_image_operation>)>>('wire_jpeg_decode');
  late final _wire_jpeg_decode = _wire_jpeg_decodePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_list_image_operation>)>();

  void wire_run_image_pipeline(
    int port_,
    ffi.Pointer<wire_RawImage> raw_image,
    ffi.Pointer<wire_list_image_operation> operations,
  ) {
    return _wire_run_image_pipeline(
      port_,
      raw_image,
      operations,
    );
  }

  late final _wire_run_image_pipelinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_RawImage>,
                  ffi.Pointer<wire_list_image_operation>)>>(
      'wire_run_image_pipeline');
  late final _wire_run_image_pipeline = _wire_run_image_pipelinePtr.asFunction<
      void Function(int, ffi.Pointer<wire_RawImage>,
          ffi.Pointer<wire_list_image_operation>)>();

  void wire_update_flutter_app_last_alive_time(
    int port_,
  ) {
    return _wire_update_flutter_app_last_alive_time(
      port_,
    );
  }

  late final _wire_update_flutter_app_last_alive_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_update_flutter_app_last_alive_time');
  late final _wire_update_flutter_app_last_alive_time =
      _wire_update_flutter_app_last_alive_timePtr
          .asFunction<void Function(int)>();

  ffi.Pointer<wire_RawImage> new_box_autoadd_raw_image_0() {
    return _new_box_autoadd_raw_image_0();
  }

  late final _new_box_autoadd_raw_image_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RawImage> Function()>>(
          'new_box_autoadd_raw_image_0');
  late final _new_box_autoadd_raw_image_0 = _new_box_autoadd_raw_image_0Ptr
      .asFunction<ffi.Pointer<wire_RawImage> Function()>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_0(
    int value,
  ) {
    return _new_box_autoadd_u8_0(
      value,
    );
  }

  late final _new_box_autoadd_u8_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'new_box_autoadd_u8_0');
  late final _new_box_autoadd_u8_0 = _new_box_autoadd_u8_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<ffi.UintPtr> new_box_autoadd_usize_0(
    int value,
  ) {
    return _new_box_autoadd_usize_0(
      value,
    );
  }

  late final _new_box_autoadd_usize_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>>(
      'new_box_autoadd_usize_0');
  late final _new_box_autoadd_usize_0 = _new_box_autoadd_usize_0Ptr
      .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<wire_list_image_operation> new_list_image_operation_0(
    int len,
  ) {
    return _new_list_image_operation_0(
      len,
    );
  }

  late final _new_list_image_operation_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_image_operation> Function(
              ffi.Int32)>>('new_list_image_operation_0');
  late final _new_list_image_operation_0 = _new_list_image_operation_0Ptr
      .asFunction<ffi.Pointer<wire_list_image_operation> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<ImageOperationKind> inflate_ImageOperation_CropToAspectRatio() {
    return _inflate_ImageOperation_CropToAspectRatio();
  }

  late final _inflate_ImageOperation_CropToAspectRatioPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImageOperationKind> Function()>>(
          'inflate_ImageOperation_CropToAspectRatio');
  late final _inflate_ImageOperation_CropToAspectRatio =
      _inflate_ImageOperation_CropToAspectRatioPtr
          .asFunction<ffi.Pointer<ImageOperationKind> Function()>();

  ffi.Pointer<ImageOperationKind> inflate_ImageOperation_Rotate() {
    return _inflate_ImageOperation_Rotate();
  }

  late final _inflate_ImageOperation_RotatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImageOperationKind> Function()>>(
          'inflate_ImageOperation_Rotate');
  late final _inflate_ImageOperation_Rotate = _inflate_ImageOperation_RotatePtr
      .asFunction<ffi.Pointer<ImageOperationKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_ImageOperation_CropToAspectRatio extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

final class wire_ImageOperation_Rotate extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class ImageOperationKind extends ffi.Union {
  external ffi.Pointer<wire_ImageOperation_CropToAspectRatio> CropToAspectRatio;

  external ffi.Pointer<wire_ImageOperation_Rotate> Rotate;
}

final class wire_ImageOperation extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ImageOperationKind> kind;
}

final class wire_list_image_operation extends ffi.Struct {
  external ffi.Pointer<wire_ImageOperation> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_RawImage extends ffi.Struct {
  @ffi.Int32()
  external int format;

  external ffi.Pointer<wire_uint_8_list> data;

  @ffi.UintPtr()
  external int width;

  @ffi.UintPtr()
  external int height;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
